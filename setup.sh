#!/bin/bash
# Setup script for VM Blender Automation
# This script helps users set up the project for first use

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}VM Blender Automation Setup${NC}"
echo "=================================="
echo

# Check if config.env exists
if [[ -f "config.env" ]]; then
    echo -e "${YELLOW}Warning: config.env already exists${NC}"
    read -p "Do you want to overwrite it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled. Please edit config.env manually."
        exit 0
    fi
fi

echo "Let's configure your VM connection details:"
echo

# Get VM details from user
read -p "VM Host/IP address: " VM_HOST
read -p "VM Username: " VM_USER
read -p "SSH Key file path (optional, press Enter to skip): " VM_KEY

echo
echo "Local directory configuration:"
read -p "Input directory (default: ./input): " LOCAL_INPUT_DIR
read -p "Output directory (default: ./output): " LOCAL_OUTPUT_DIR

# Set defaults
LOCAL_INPUT_DIR=${LOCAL_INPUT_DIR:-"./input"}
LOCAL_OUTPUT_DIR=${LOCAL_OUTPUT_DIR:-"./output"}

echo
echo "GPU Rendering configuration:"
read -p "Enable GPU rendering? (y/N): " -n 1 -r GPU_ENABLED
echo
if [[ $GPU_ENABLED =~ ^[Yy]$ ]]; then
    read -p "Number of GPUs (default: 1): " GPU_COUNT
    read -p "Require sudo for GPU configuration? (y/N): " -n 1 -r REQUIRE_SUDO_INPUT
    echo
    GPU_COUNT=${GPU_COUNT:-1}
    if [[ $REQUIRE_SUDO_INPUT =~ ^[Yy]$ ]]; then
        REQUIRE_SUDO="true"
    else
        REQUIRE_SUDO="false"
    fi
    USE_GPU_RENDERING="true"
else
    GPU_COUNT=1
    REQUIRE_SUDO="false"
    USE_GPU_RENDERING="false"
fi

# Create config.env
cat > config.env << EOF
# VM Blender Automation Configuration File
# Generated by setup script

# VM Connection Details (REQUIRED)
VM_HOST="$VM_HOST"
VM_USER="$VM_USER"
VM_KEY="$VM_KEY"

# Local Directories
LOCAL_INPUT_DIR="$LOCAL_INPUT_DIR"
LOCAL_OUTPUT_DIR="$LOCAL_OUTPUT_DIR"

# Remote Settings
REMOTE_WORK_DIR="/tmp/blender_work"

# Blender Settings
BLENDER_FILE=""
BLENDER_SCRIPT=""
OUTPUT_FORMAT="PNG"
FRAME_START=1
FRAME_END=1

# GPU Rendering Settings
USE_GPU_RENDERING=$USE_GPU_RENDERING
GPU_COUNT=$GPU_COUNT
REQUIRE_SUDO=$REQUIRE_SUDO

# Cleanup Settings
CLEANUP_REMOTE=true
EOF

echo -e "${GREEN}Configuration saved to config.env${NC}"
echo

# Create directories
echo "Creating local directories..."
mkdir -p "$LOCAL_INPUT_DIR"
mkdir -p "$LOCAL_OUTPUT_DIR"
echo -e "${GREEN}Directories created${NC}"
echo

# Make scripts executable
echo "Making scripts executable..."
chmod +x vm_blender_automation.sh
chmod +x gpu_render.sh
chmod +x helpers.sh
echo -e "${GREEN}Scripts are now executable${NC}"
echo

# Test SSH connection
echo "Testing SSH connection..."
if ./vm_blender_automation.sh --test-ssh; then
    echo -e "${GREEN}SSH connection test passed!${NC}"
    echo
    echo -e "${BLUE}Setup completed successfully!${NC}"
    echo
    echo "You can now run the script with:"
    echo "  ./vm_blender_automation.sh -i $LOCAL_INPUT_DIR -o $LOCAL_OUTPUT_DIR -s render_script.py"
    echo
    echo "For GPU rendering:"
    echo "  ./vm_blender_automation.sh -i $LOCAL_INPUT_DIR -o $LOCAL_OUTPUT_DIR -f your_scene.blend --gpu"
else
    echo -e "${RED}SSH connection test failed${NC}"
    echo "Please check your VM details and try again."
    echo "You can edit config.env manually or re-run this setup script."
fi